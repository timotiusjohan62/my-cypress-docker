version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-testdb}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    networks:
      - ${NETWORK_NAME:-app-network}

  backend:
    build: 
      context: ./backend
      args:
        NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-testdb}
      NODE_ENV: ${NODE_ENV:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    networks:
      - ${NETWORK_NAME:-app-network}

  cypress:
    build:
      context: .
      dockerfile: cypress/Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    environment:
      CYPRESS_BASE_URL: ${CYPRESS_BASE_URL:-http://backend:4000}
      CYPRESS_VIDEO: ${CYPRESS_VIDEO:-false}
      CYPRESS_SCREENSHOTS_ON_FAILURE: ${CYPRESS_SCREENSHOTS_ON_FAILURE:-false}
      CYPRESS_VIEWPORT_WIDTH: ${CYPRESS_VIEWPORT_WIDTH:-1280}
      CYPRESS_VIEWPORT_HEIGHT: ${CYPRESS_VIEWPORT_HEIGHT:-720}
      CYPRESS_BROWSER: ${CYPRESS_BROWSER:-electron}
      CYPRESS_HEADED: ${CYPRESS_HEADED:-false}
      DEBUG: ${DEBUG:-false}
      IS_TESTING: ${IS_TESTING:-true}
    volumes:
      - ./cypress/evidence:/e2e/cypress/evidence
      - ./cypress/e2e:/e2e/cypress/e2e
    networks:
      - ${NETWORK_NAME:-app-network}

  jmeter:
    build:
      context: ./jmeter
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./jmeter/results:/tests/results
    environment:
      TEST_PLAN: ${JMETER_TEST_PLAN:-simple-load-test.jmx}
      USERS: ${JMETER_USERS:-5}
      RAMP_TIME: ${JMETER_RAMP_TIME:-10}
      HOST: ${JMETER_HOST:-backend}
      PORT: ${JMETER_PORT:-4000}
    networks:
      - ${NETWORK_NAME:-app-network}

networks:
  ${NETWORK_NAME:-app-network}:
    driver: bridge

volumes:
  db-data:
